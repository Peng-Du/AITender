{
  "name": "AI Tender Analysis and Send Email EN",
  "nodes": [
    {
      "parameters": {
        "fileSelector": "=D:/AITender/TenderBase/{{ $('get destDate').item.json.destDate }}/*.md",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        512,
        64
      ],
      "id": "40bdf320-5cc5-4ec2-901e-b5eab9bfaecd",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const binaryData = $input.item.binary.data.data;\nconst stringContent = Buffer.from(binaryData, 'base64').toString('utf-8');\nreturn {\n  fileName: $input.item.json.fileName,\n  stringContent: stringContent,\n  success: true\n}; // ✅ 返回对象"
      },
      "id": "7425c757-c180-42ed-9e69-3f0442d18c5c",
      "name": "Extract File Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        64
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=## Role Definition\nYou are a professional tender analysis expert Agent, responsible for analyzing the content of the tender documents, extracting key equipment and technical requirements information, and providing accurate and comprehensive technical basis for equipment selection.\n\n## Main tasks\nAnalyze the content of the tender documents and generate structured summary documents, focusing on equipment and technical requirements, and providing sufficient basis for subsequent equipment selection work.\n\n## Summary Language\nEnglish\n\n## Analysis focus\n\n### 1. Equipment requirements analysis\n- **Hardware equipment list**: Extract all involved hardware equipment types, quantities, and specification requirements\n- **Equipment performance indicators**: Identify key performance parameters, technical indicators, and capacity requirements\n- **Equipment compatibility**: Analyze compatibility requirements and interface standards between devices\n- **Equipment level requirements**: Extract equipment quality levels, certification standards, and brand requirements\n\n### 2. Technical specification requirements\n- **Technical standards**: Identify industry standards, international standards, and national standards that must be followed\n- **Technical parameters**: Extract specific technical parameter ranges, thresholds, and restrictions\n- **Technical architecture**: Analyze system architecture requirements, network topology, and integration solutions\n- **Technical innovation requirements**: Identify special requirements for new technologies and advanced technologies\n\n### 3. Functional requirements analysis\n- **Core functions**: Extract core functional modules that must be implemented by the system\n- **Extended functions**: Identify optional functions and future expansion requirements\n- **Performance requirements**: Analyze response time, processing power, and concurrency requirements\n- **Reliability requirements**: Extract availability, stability, and fault tolerance requirements\n\n### 4. Implementation requirements\n- **Installation and deployment**: Analyze the installation environment, deployment method, and implementation plan requirements\n- **Test acceptance**: Extract test standards, acceptance conditions, and quality requirements\n- **Training support**: Identify training needs and technical support requirements\n- **Maintenance guarantee**: Analyze maintenance cycle, warranty period, and service level requirements\n\n## Summary content format requirements\n\nThe generated summary content must strictly use the Markdown format and contain the following structure:\n\n```markdown\n# Technical requirements summary of the tender document\n\n## Basic project information\n- Project name:\n- Bidding unit:\n- Project budget:\n- Implementation cycle:\n\n## Equipment requirements list\n\n### Core equipment\n| Equipment type | Quantity | Key specifications | Performance requirements | Brand requirements |\n|---------|------|----------|----------|----------|\n\n### Auxiliary equipment\n| Equipment type | Quantity | Key specifications | Performance requirements | Brand requirements |\n|---------|------|----------|----------|----------|----------|\n\n## Technical specification requirements\n\n### Technical standards\n- Standards that must be followed:\n- Recommended standards:\n- Certification requirements:\n\n### Key technical parameters\n- Performance indicators:\n- Capacity requirements:\n- Interface standards:\n\nNote: If the above content contains double quotes '\"', be sure to replace them with escape characters '\\\"'\n\n### Input content is in JSON format:\n\nBelow is the input file name and file content\n[\n{\n\"fileName\": {{ $json.fileName }},\n\"stringContent\": {{ $json.stringContent }}\n}\n]\n\n### Output format requirements\n\nThe output format must be strictly in JSON format:\n[\n{\n\"fileName\": the file name of the bid,\n\"stringSummary\": the summary content of the bid,\n}\n]\n\nPlease now generate the summary document based on the requirements above\n\nPlease check again the stringSummary must be strict markdown and output must be strict JSON.",
        "options": {
          "systemMessage": "="
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1200,
        64
      ],
      "id": "35352c68-a867-496d-a97f-465d00482bed",
      "name": "AI Agent",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1200,
        336
      ],
      "id": "c51a78fd-4d26-4228-98eb-ac7003abf355",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "KhQUxeXWSqwoGWGu",
          "name": "Google Gemini Balance"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        960,
        64
      ],
      "id": "4d4f0d35-67c2-4566-bc38-35dbf0331ba8",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1520,
        64
      ],
      "id": "2112d8c0-91bf-48b9-b58f-5ab3c40044e5",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=D:/AITender/TenderBase/{{ $('get destDate').item.json.destDate }}/summary- {{ $('Extract File Info').item.json.fileName }}.json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1696,
        64
      ],
      "id": "10618805-2415-4fab-be46-4000e01d591b",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {
        "command": "=D: && cd D:\\AITender\\DownloadTender && python main.py --date {{ $json.destDate }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        80,
        160
      ],
      "id": "e51ba277-29e1-432a-bc3d-fa3e7730a821",
      "name": "Download Tenders"
    },
    {
      "parameters": {
        "command": "=D: && cd D:\\AITender\\AutoTenderReader && python run_process_pdfs.py {{ $('get destDate').item.json.destDate }}"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        288,
        160
      ],
      "id": "da9a7857-acf0-4a4d-b9c3-fedc500a55c8",
      "name": "Process PDFs"
    },
    {
      "parameters": {
        "command": "=D: && cd D:\\AITender\\AutoTenderReader && python run_json_parser.py --date {{ $('get destDate').item.json.destDate }} --language English"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1440,
        -240
      ],
      "id": "dc4de45d-869c-43ee-b684-3abb21871e63",
      "name": "JSON Parser"
    },
    {
      "parameters": {
        "filePath": "=D:\\\\AITender\\\\TenderBase\\\\summary\\\\summary_{{ $('get destDate').item.json.destDate }}.html",
        "dataPropertyName": "=data"
      },
      "id": "e12d1282-5e74-48af-80c6-d0ad924a6141",
      "name": "Read HTML Content",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        1664,
        -240
      ]
    },
    {
      "parameters": {
        "jsCode": "const binaryData = $input.item.binary.data.data;\nconst stringContent = Buffer.from(binaryData, 'base64').toString('utf-8');\nreturn {\n  fileName: $input.item.json.fileName,\n  stringContent: stringContent,\n  success: true\n}; // ✅ 返回对象"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1888,
        -240
      ],
      "id": "9731a126-75b3-43c0-ae1b-2d69216286dc",
      "name": "Code"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 14
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        512,
        -256
      ],
      "id": "68e67655-504d-44bf-9bc7-8ad01088a750",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "// 1. 从 n8n 的内置变量中获取今天的日期字符串\nconst todayString = $today;\n\n// 2. 将字符串转换为 JavaScript 的 Date 对象\nconst todayDate = new Date(todayString);\n\n// 3. 创建一个新的 Date 对象来表示昨天，以避免修改原始对象\nconst yesterdayDate = new Date(todayDate);\n\n// 4. 将日期设置为前一天。setDate() 会自动处理跨月份和跨年份的情况\n// yesterdayDate.setDate(yesterdayDate.getDate() - 1);\nconst yesterdayDateStr = yesterdayDate.toISOString().slice(0,10);\n\n// 5. 返回一个包含昨天日期的对象。\n//    我们返回完整的 ISO 字符串，与 $today 的格式保持一致。\n//    这是 n8n 的标准返回格式，每个对象代表一个 item。\nreturn [{\n  json: {\n    today: $today.toISODate().toString().slice(0,10),\n    yesterday: yesterdayDateStr,\n    destDate: \"2025-10-10\"\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -256
      ],
      "id": "31c57099-7f08-4a15-9848-b6b43459e9be",
      "name": "get destDate"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1200,
        -240
      ],
      "id": "bed9bcd0-12a8-42c1-af00-4b4d4951b922",
      "name": "Merge"
    },
    {
      "parameters": {
        "sendTo": "liu.guangfeng@h3c.com, dupeng@h3c.com, li.songa@h3c.com, felixliuca@outlook.com, wang.zhongyi@h3c.com, sun.lixiang@h3c.com, miguel.rico@h3c.com, rosendo.garcia@h3c.com, Daniel.Homobono@h3c.com, sparma@h3c.com",
        "subject": "=Spain Public Tender Summary  {{ $('get destDate').item.json.destDate }}",
        "message": "={{ $json.stringContent }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2096,
        -240
      ],
      "id": "5dfbb094-1bf1-4c66-8a3f-d09726c74f35",
      "name": "Send a message",
      "webhookId": "9e7dd321-faa2-4d21-9dca-f566f7b9d2f3",
      "credentials": {
        "gmailOAuth2": {
          "id": "pYVd7XxNsUJeFcZT",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        1024,
        336
      ],
      "id": "f0845a3c-2dc2-45f8-a51d-28ae7c9fd21b",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "vy8wksKYl9m3MT3M",
          "name": "DeepSeek account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "dupeng@h3c.com",
        "subject": "=Spain Public Tender Summary  {{ $('get destDate').item.json.destDate }} - test",
        "message": "={{ $json.stringContent }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2096,
        0
      ],
      "id": "6f03128a-6ff4-4704-829c-570cbfffb6bc",
      "name": "Send a message test",
      "webhookId": "9e7dd321-faa2-4d21-9dca-f566f7b9d2f3",
      "credentials": {
        "gmailOAuth2": {
          "id": "pYVd7XxNsUJeFcZT",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1376,
        336
      ],
      "id": "7cafc1ad-aafb-4600-a7b1-ec6fda143cd1",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "pYPeYqzrDUt1Pjom",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## 1. Trigger and Get Date",
        "height": 240,
        "width": 464
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        448,
        -352
      ],
      "id": "7d8da1ea-5a94-41df-b3bc-121b4fad93e7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## 2. Download Tender and change to Markdown",
        "height": 240,
        "width": 464,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -48,
        80
      ],
      "id": "854b45f2-ce87-4cc4-8a99-188663daa1bf",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## 3. Read the Markdown and Send to AI Agent",
        "height": 272,
        "width": 464,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        448,
        0
      ],
      "id": "169468db-a16f-4ada-b9d4-0da97a7f2e01",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## 4. AI Analysis and Summarize to Json",
        "height": 480,
        "width": 912,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        944,
        0
      ],
      "id": "1a3f6484-c2d8-43c1-92f6-e724b01fa57a",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## 5. Parse the Json, build to Html and Send the email",
        "height": 256,
        "width": 960,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1344,
        -352
      ],
      "id": "2896d9c3-8da4-443b-a4d9-95fe94248736",
      "name": "Sticky Note4"
    }
  ],
  "pinData": {},
  "connections": {
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Extract File Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract File Info": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Tenders": {
      "main": [
        [
          {
            "node": "Process PDFs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process PDFs": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read HTML Content": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send a message test",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSON Parser": {
      "main": [
        [
          {
            "node": "Read HTML Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "get destDate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get destDate": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Download Tenders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "JSON Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        []
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e4fd7faf-4f4b-48a0-b545-2612ee9bd27d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb1cc5f73bad9ccf10dba27b69f1b925a4900e27953c5908d4996dd9128e6621"
  },
  "id": "hp9afK3aZC6HXU8J",
  "tags": []
}